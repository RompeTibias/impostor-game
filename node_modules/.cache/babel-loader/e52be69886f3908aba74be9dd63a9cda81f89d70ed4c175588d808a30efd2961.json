{"ast":null,"code":"import{collection,doc,setDoc,getDoc,updateDoc,onSnapshot,query,where,getDocs}from'firebase/firestore';import db from'../firebase';export const createGame=async(gameId,hostName)=>{const gameRef=doc(db,'games',gameId);await setDoc(gameRef,{host:hostName,players:[{id:Date.now().toString(),name:hostName,isHost:true}],status:'waiting',currentRound:0,createdAt:new Date().toISOString()});return gameRef;};export const joinGame=async(gameId,playerName)=>{const gameRef=doc(db,'games',gameId);const gameDoc=await getDoc(gameRef);if(!gameDoc.exists()){throw new Error('La sala no existe');}const gameData=gameDoc.data();if(gameData.status!=='waiting'){throw new Error('La sala ya está en juego');}const newPlayer={id:Date.now().toString(),name:playerName,isHost:false};await updateDoc(gameRef,{players:[...gameData.players,newPlayer]});return newPlayer;};export const subscribeToGame=(gameId,callback)=>{const gameRef=doc(db,'games',gameId);return onSnapshot(gameRef,doc=>{if(doc.exists()){callback(doc.data());}});};export const startGame=async gameId=>{const gameRef=doc(db,'games',gameId);const gameDoc=await getDoc(gameRef);const gameData=gameDoc.data();if(gameData.players.length<3){throw new Error('Se necesitan al menos 3 jugadores');}// Seleccionar impostor aleatorio\nconst impostorIndex=Math.floor(Math.random()*gameData.players.length);const impostor=gameData.players[impostorIndex];await updateDoc(gameRef,{status:'playing',impostor:impostor.id,currentRound:1,roundStartTime:new Date().toISOString()});};export const submitAnswer=async(gameId,playerId,answer)=>{const gameRef=doc(db,'games',gameId);const gameDoc=await getDoc(gameRef);const gameData=gameDoc.data();const updatedPlayers=gameData.players.map(player=>{if(player.id===playerId){return{...player,answer};}return player;});await updateDoc(gameRef,{players:updatedPlayers});};export const submitVote=async(gameId,voterId,votedId)=>{const gameRef=doc(db,'games',gameId);const gameDoc=await getDoc(gameRef);const gameData=gameDoc.data();const updatedPlayers=gameData.players.map(player=>{if(player.id===voterId){return{...player,vote:votedId};}return player;});await updateDoc(gameRef,{players:updatedPlayers});};export const startNextRound=async gameId=>{const gameRef=doc(db,'games',gameId);const gameDoc=await getDoc(gameRef);const gameData=gameDoc.data();// Seleccionar nuevo impostor\nconst impostorIndex=Math.floor(Math.random()*gameData.players.length);const impostor=gameData.players[impostorIndex];await updateDoc(gameRef,{currentRound:gameData.currentRound+1,roundStartTime:new Date().toISOString(),impostor:impostor.id,players:gameData.players.map(player=>({...player,answer:null,vote:null}))});};","map":{"version":3,"names":["collection","doc","setDoc","getDoc","updateDoc","onSnapshot","query","where","getDocs","db","createGame","gameId","hostName","gameRef","host","players","id","Date","now","toString","name","isHost","status","currentRound","createdAt","toISOString","joinGame","playerName","gameDoc","exists","Error","gameData","data","newPlayer","subscribeToGame","callback","startGame","length","impostorIndex","Math","floor","random","impostor","roundStartTime","submitAnswer","playerId","answer","updatedPlayers","map","player","submitVote","voterId","votedId","vote","startNextRound"],"sources":["C:/Users/hugoe/Downloads/react-19.0.0/src/utils/firebaseUtils.js"],"sourcesContent":["import { \r\n  collection, \r\n  doc, \r\n  setDoc, \r\n  getDoc, \r\n  updateDoc, \r\n  onSnapshot,\r\n  query,\r\n  where,\r\n  getDocs\r\n} from 'firebase/firestore';\r\nimport db from '../firebase';\r\n\r\nexport const createGame = async (gameId, hostName) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  await setDoc(gameRef, {\r\n    host: hostName,\r\n    players: [{\r\n      id: Date.now().toString(),\r\n      name: hostName,\r\n      isHost: true\r\n    }],\r\n    status: 'waiting',\r\n    currentRound: 0,\r\n    createdAt: new Date().toISOString()\r\n  });\r\n  return gameRef;\r\n};\r\n\r\nexport const joinGame = async (gameId, playerName) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  \r\n  if (!gameDoc.exists()) {\r\n    throw new Error('La sala no existe');\r\n  }\r\n\r\n  const gameData = gameDoc.data();\r\n  if (gameData.status !== 'waiting') {\r\n    throw new Error('La sala ya está en juego');\r\n  }\r\n\r\n  const newPlayer = {\r\n    id: Date.now().toString(),\r\n    name: playerName,\r\n    isHost: false\r\n  };\r\n\r\n  await updateDoc(gameRef, {\r\n    players: [...gameData.players, newPlayer]\r\n  });\r\n\r\n  return newPlayer;\r\n};\r\n\r\nexport const subscribeToGame = (gameId, callback) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  return onSnapshot(gameRef, (doc) => {\r\n    if (doc.exists()) {\r\n      callback(doc.data());\r\n    }\r\n  });\r\n};\r\n\r\nexport const startGame = async (gameId) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  const gameData = gameDoc.data();\r\n\r\n  if (gameData.players.length < 3) {\r\n    throw new Error('Se necesitan al menos 3 jugadores');\r\n  }\r\n\r\n  // Seleccionar impostor aleatorio\r\n  const impostorIndex = Math.floor(Math.random() * gameData.players.length);\r\n  const impostor = gameData.players[impostorIndex];\r\n\r\n  await updateDoc(gameRef, {\r\n    status: 'playing',\r\n    impostor: impostor.id,\r\n    currentRound: 1,\r\n    roundStartTime: new Date().toISOString()\r\n  });\r\n};\r\n\r\nexport const submitAnswer = async (gameId, playerId, answer) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  const gameData = gameDoc.data();\r\n\r\n  const updatedPlayers = gameData.players.map(player => {\r\n    if (player.id === playerId) {\r\n      return { ...player, answer };\r\n    }\r\n    return player;\r\n  });\r\n\r\n  await updateDoc(gameRef, {\r\n    players: updatedPlayers\r\n  });\r\n};\r\n\r\nexport const submitVote = async (gameId, voterId, votedId) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  const gameData = gameDoc.data();\r\n\r\n  const updatedPlayers = gameData.players.map(player => {\r\n    if (player.id === voterId) {\r\n      return { ...player, vote: votedId };\r\n    }\r\n    return player;\r\n  });\r\n\r\n  await updateDoc(gameRef, {\r\n    players: updatedPlayers\r\n  });\r\n};\r\n\r\nexport const startNextRound = async (gameId) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  const gameData = gameDoc.data();\r\n\r\n  // Seleccionar nuevo impostor\r\n  const impostorIndex = Math.floor(Math.random() * gameData.players.length);\r\n  const impostor = gameData.players[impostorIndex];\r\n\r\n  await updateDoc(gameRef, {\r\n    currentRound: gameData.currentRound + 1,\r\n    roundStartTime: new Date().toISOString(),\r\n    impostor: impostor.id,\r\n    players: gameData.players.map(player => ({\r\n      ...player,\r\n      answer: null,\r\n      vote: null\r\n    }))\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}