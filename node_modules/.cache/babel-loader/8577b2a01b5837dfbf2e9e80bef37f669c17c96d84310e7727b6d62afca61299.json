{"ast":null,"code":"import { collection, doc, setDoc, getDoc, updateDoc, onSnapshot, query, where, getDocs } from 'firebase/firestore';\nimport db from '../firebase';\nexport const createGame = async (gameId, hostName) => {\n  const gameRef = doc(db, 'games', gameId);\n  await setDoc(gameRef, {\n    host: hostName,\n    players: [{\n      id: Date.now().toString(),\n      name: hostName,\n      isHost: true\n    }],\n    status: 'waiting',\n    currentRound: 0,\n    createdAt: new Date().toISOString()\n  });\n  return gameRef;\n};\nexport const joinGame = async (gameId, playerName) => {\n  const gameRef = doc(db, 'games', gameId);\n  const gameDoc = await getDoc(gameRef);\n  if (!gameDoc.exists()) {\n    throw new Error('La sala no existe');\n  }\n  const gameData = gameDoc.data();\n  if (gameData.status !== 'waiting') {\n    throw new Error('La sala ya está en juego');\n  }\n  const newPlayer = {\n    id: Date.now().toString(),\n    name: playerName,\n    isHost: false\n  };\n  await updateDoc(gameRef, {\n    players: [...gameData.players, newPlayer]\n  });\n  return newPlayer;\n};\nexport const subscribeToGame = (gameId, callback) => {\n  const gameRef = doc(db, 'games', gameId);\n  return onSnapshot(gameRef, doc => {\n    if (doc.exists()) {\n      callback(doc.data());\n    }\n  });\n};\nexport const startGame = async gameId => {\n  const gameRef = doc(db, 'games', gameId);\n  const gameDoc = await getDoc(gameRef);\n  const gameData = gameDoc.data();\n  if (gameData.players.length < 3) {\n    throw new Error('Se necesitan al menos 3 jugadores');\n  }\n\n  // Seleccionar impostor aleatorio\n  const impostorIndex = Math.floor(Math.random() * gameData.players.length);\n  const impostor = gameData.players[impostorIndex];\n  await updateDoc(gameRef, {\n    status: 'playing',\n    impostor: impostor.id,\n    currentRound: 1,\n    roundStartTime: new Date().toISOString()\n  });\n};\nexport const submitAnswer = async (gameId, playerId, answer) => {\n  const gameRef = doc(db, 'games', gameId);\n  const gameDoc = await getDoc(gameRef);\n  const gameData = gameDoc.data();\n  const updatedPlayers = gameData.players.map(player => {\n    if (player.id === playerId) {\n      return {\n        ...player,\n        answer\n      };\n    }\n    return player;\n  });\n  await updateDoc(gameRef, {\n    players: updatedPlayers\n  });\n};\nexport const submitVote = async (gameId, voterId, votedId) => {\n  const gameRef = doc(db, 'games', gameId);\n  const gameDoc = await getDoc(gameRef);\n  const gameData = gameDoc.data();\n  const updatedPlayers = gameData.players.map(player => {\n    if (player.id === voterId) {\n      return {\n        ...player,\n        vote: votedId\n      };\n    }\n    return player;\n  });\n  await updateDoc(gameRef, {\n    players: updatedPlayers\n  });\n};\nexport const startNextRound = async gameId => {\n  const gameRef = doc(db, 'games', gameId);\n  const gameDoc = await getDoc(gameRef);\n  const gameData = gameDoc.data();\n\n  // Seleccionar nuevo impostor\n  const impostorIndex = Math.floor(Math.random() * gameData.players.length);\n  const impostor = gameData.players[impostorIndex];\n  await updateDoc(gameRef, {\n    currentRound: gameData.currentRound + 1,\n    roundStartTime: new Date().toISOString(),\n    impostor: impostor.id,\n    players: gameData.players.map(player => ({\n      ...player,\n      answer: null,\n      vote: null\n    }))\n  });\n};","map":{"version":3,"names":["collection","doc","setDoc","getDoc","updateDoc","onSnapshot","query","where","getDocs","db","createGame","gameId","hostName","gameRef","host","players","id","Date","now","toString","name","isHost","status","currentRound","createdAt","toISOString","joinGame","playerName","gameDoc","exists","Error","gameData","data","newPlayer","subscribeToGame","callback","startGame","length","impostorIndex","Math","floor","random","impostor","roundStartTime","submitAnswer","playerId","answer","updatedPlayers","map","player","submitVote","voterId","votedId","vote","startNextRound"],"sources":["C:/Users/hugoe/Downloads/react-19.0.0/src/utils/firebaseUtils.js"],"sourcesContent":["import { \r\n  collection, \r\n  doc, \r\n  setDoc, \r\n  getDoc, \r\n  updateDoc, \r\n  onSnapshot,\r\n  query,\r\n  where,\r\n  getDocs\r\n} from 'firebase/firestore';\r\nimport db from '../firebase';\r\n\r\nexport const createGame = async (gameId, hostName) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  await setDoc(gameRef, {\r\n    host: hostName,\r\n    players: [{\r\n      id: Date.now().toString(),\r\n      name: hostName,\r\n      isHost: true\r\n    }],\r\n    status: 'waiting',\r\n    currentRound: 0,\r\n    createdAt: new Date().toISOString()\r\n  });\r\n  return gameRef;\r\n};\r\n\r\nexport const joinGame = async (gameId, playerName) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  \r\n  if (!gameDoc.exists()) {\r\n    throw new Error('La sala no existe');\r\n  }\r\n\r\n  const gameData = gameDoc.data();\r\n  if (gameData.status !== 'waiting') {\r\n    throw new Error('La sala ya está en juego');\r\n  }\r\n\r\n  const newPlayer = {\r\n    id: Date.now().toString(),\r\n    name: playerName,\r\n    isHost: false\r\n  };\r\n\r\n  await updateDoc(gameRef, {\r\n    players: [...gameData.players, newPlayer]\r\n  });\r\n\r\n  return newPlayer;\r\n};\r\n\r\nexport const subscribeToGame = (gameId, callback) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  return onSnapshot(gameRef, (doc) => {\r\n    if (doc.exists()) {\r\n      callback(doc.data());\r\n    }\r\n  });\r\n};\r\n\r\nexport const startGame = async (gameId) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  const gameData = gameDoc.data();\r\n\r\n  if (gameData.players.length < 3) {\r\n    throw new Error('Se necesitan al menos 3 jugadores');\r\n  }\r\n\r\n  // Seleccionar impostor aleatorio\r\n  const impostorIndex = Math.floor(Math.random() * gameData.players.length);\r\n  const impostor = gameData.players[impostorIndex];\r\n\r\n  await updateDoc(gameRef, {\r\n    status: 'playing',\r\n    impostor: impostor.id,\r\n    currentRound: 1,\r\n    roundStartTime: new Date().toISOString()\r\n  });\r\n};\r\n\r\nexport const submitAnswer = async (gameId, playerId, answer) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  const gameData = gameDoc.data();\r\n\r\n  const updatedPlayers = gameData.players.map(player => {\r\n    if (player.id === playerId) {\r\n      return { ...player, answer };\r\n    }\r\n    return player;\r\n  });\r\n\r\n  await updateDoc(gameRef, {\r\n    players: updatedPlayers\r\n  });\r\n};\r\n\r\nexport const submitVote = async (gameId, voterId, votedId) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  const gameData = gameDoc.data();\r\n\r\n  const updatedPlayers = gameData.players.map(player => {\r\n    if (player.id === voterId) {\r\n      return { ...player, vote: votedId };\r\n    }\r\n    return player;\r\n  });\r\n\r\n  await updateDoc(gameRef, {\r\n    players: updatedPlayers\r\n  });\r\n};\r\n\r\nexport const startNextRound = async (gameId) => {\r\n  const gameRef = doc(db, 'games', gameId);\r\n  const gameDoc = await getDoc(gameRef);\r\n  const gameData = gameDoc.data();\r\n\r\n  // Seleccionar nuevo impostor\r\n  const impostorIndex = Math.floor(Math.random() * gameData.players.length);\r\n  const impostor = gameData.players[impostorIndex];\r\n\r\n  await updateDoc(gameRef, {\r\n    currentRound: gameData.currentRound + 1,\r\n    roundStartTime: new Date().toISOString(),\r\n    impostor: impostor.id,\r\n    players: gameData.players.map(player => ({\r\n      ...player,\r\n      answer: null,\r\n      vote: null\r\n    }))\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}